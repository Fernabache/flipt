// Code generated by protoc-gen-go-gateway-client. DO NOT EDIT.

package meta

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	status "google.golang.org/genproto/googleapis/rpc/status"
	status1 "google.golang.org/grpc/status"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http "net/http"
	url "net/url"
)

type MetadataServiceHTTPClient struct {
	client *http.Client
	addr   string
}

func NewMetadataServiceHTTPClient(addr string) *MetadataServiceHTTPClient {
	return &MetadataServiceHTTPClient{client: http.DefaultClient, addr: addr}
}

func (x *MetadataServiceHTTPClient) GetConfiguration(ctx context.Context, v *emptypb.Empty) (*httpbody.HttpBody, error) {
	var body io.Reader
	var values url.Values
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, x.addr+"/meta/config", body)
	if err != nil {
		return nil, err
	}
	req.URL.RawQuery = values.Encode()
	resp, err := x.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	var output httpbody.HttpBody
	respData, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	if err := checkResponse(resp, respData); err != nil {
		return nil, err
	}
	if err := protojson.Unmarshal(respData, &output); err != nil {
		return nil, err
	}
	return &output, nil
}

func (x *MetadataServiceHTTPClient) GetInfo(ctx context.Context, v *emptypb.Empty) (*httpbody.HttpBody, error) {
	var body io.Reader
	var values url.Values
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, x.addr+"/meta/info", body)
	if err != nil {
		return nil, err
	}
	req.URL.RawQuery = values.Encode()
	resp, err := x.client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	var output httpbody.HttpBody
	respData, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	if err := checkResponse(resp, respData); err != nil {
		return nil, err
	}
	if err := protojson.Unmarshal(respData, &output); err != nil {
		return nil, err
	}
	return &output, nil
}

func checkResponse(resp *http.Response, v []byte) error {
	if resp.StatusCode != http.StatusOK {
		var status status.Status
		if err := protojson.Unmarshal(v, &status); err != nil {
			return err
		}
		return status1.ErrorProto(&status)
	}

	return nil
}
